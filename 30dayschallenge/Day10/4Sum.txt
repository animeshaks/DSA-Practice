18. 4Sum - https://leetcode.com/problems/4sum/

ERROR :- runtime error: signed integer overflow: 2000000000 + 1000000000 cannot be represented in type 'int' (solution.cpp)
But Almost 90% Test case passed

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> res;
        sort(nums.begin(), nums.end());
        int n = nums.size();
        
        for (int i=0;i<n-1;i++) {
            for(int j=i+1;j<n;j++){
                // int target = -(nums[i]+nums[j]);
                int front = j+1;
                int back = n-1;
                
                while(front < back){
                    long long int sum = nums[i]+nums[j]+nums[front]+nums[back];
                    if(sum < target)
                        front++;
                    else if(sum > target)
                        back--;
                    else{
                        vector<int> quadruplets = {nums[i], nums[j], nums[front], nums[back]};
                        res.push_back(quadruplets);
                        
                        while(front<back && nums[front] == quadruplets[2]) front++;
                        
                        while (front<back && nums[back] == quadruplets[3]) back--;
                    }             
                }
                while (j+1 < n && nums[j+1] == nums[j]) 
                    j++;
                
            }
            while (i+1 < n-1 && nums[i+1] == nums[i]) 
                i++;
            
        }
        return res;
    }
};

Perfect Solution:- (Divided target into two parts)

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> res;
        sort(nums.begin(), nums.end());
        int n = nums.size();
        
        for (int i=0;i<n-1;i++) {
            for(int j=i+1;j<n;j++){
                int target2 = target-(nums[i]+nums[j]);
                int front = j+1;
                int back = n-1;
                
                while(front < back){
                    int sum = nums[front]+nums[back];
                    if(sum < target2)
                        front++;
                    else if(sum > target2)
                        back--;
                    else{
                        vector<int> quadruplets = {nums[i], nums[j], nums[front], nums[back]};
                        res.push_back(quadruplets);
                        
                        while(front<back && nums[front] == quadruplets[2]) front++;
                        
                        while (front<back && nums[back] == quadruplets[3]) back--;
                    }             
                }
                while (j+1 < n && nums[j+1] == nums[j]) 
                    j++;
                
            }
            while (i+1 < n-1 && nums[i+1] == nums[i]) 
                i++;
            
        }
        return res;
    }
};
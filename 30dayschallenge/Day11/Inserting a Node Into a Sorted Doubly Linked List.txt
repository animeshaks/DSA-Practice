Inserting a Node Into a Sorted Doubly Linked List - https://www.hackerrank.com/challenges/insert-a-node-into-a-sorted-doubly-linked-list/problem?isFullScreen=true

Approach1(Iterative Approach):-

	public DoublyLinkedListNode sortedInsert(DoublyLinkedListNode llist, int data) {
	        DoublyLinkedListNode newNode;
	        newNode.data = data;
	        
	        if (llist == null) {
	            return newNode;
	            
	        }else if(data < llist.data){
	            newNode.next = llist;
	            llist.prev = newNode;
	            return newNode; 
	             
	        }else{
	            
	            //Moving With two pointer
	            DoublyLinkedListNode n1 = null;
	            DoublyLinkedListNode n2 = llist;
	            while (n2 != null && n2.data < data) {
	                n1 = n2;
	                n2 = n2.next;
	            }
	            
	            if (n2 == null) { // insert at end of list
	                n1.next = newNode;
	                newNode.prev = n1;
	            } else { // insert in empty list
	                n1.next = newNode;
	                n2.prev = newNode;
	                newNode.prev = n1;
	                newNode.next = n2;
	            }
	            return llist;
	        }
	    }
	}

Approach1(Recursive Approach):-

	public DoublyLinkedListNode sortedInsert(DoublyLinkedListNode llist, int data) {
	        DoublyLinkedListNode newNode;
	        newNode.data = data;
	        
	        if (llist == null) {
	            return newNode;
	            
	        }else if(data < llist.data){
	            newNode.next = llist;
	            llist.prev = newNode;
	            return newNode; 
	             
	        }else{
	            DoublyLinkedListNode rest = sortedInsert(llist.next,data);
	            llist.next = rest;
	            rest.prev = llist
	            return head;
	        }
	    }
	}

	//More Redable Code with same logic
	Node SortedInsert(Node head,int data) {
	    Node n = new Node();
	    n.data = data;
	    if (head == null) {
	        return n;
	    }
	    else if (data <= head.data) {
	        n.next = head;
	        head.prev = n;
	        return n;
	    }
	    else {
	        Node rest = SortedInsert(head.next, data);
	        head.next = rest;
	        rest.prev = head;
	        return head;
	    }
	}
24. Swap Nodes in Pairs - https://leetcode.com/problems/swap-nodes-in-pairs/

ALGORITHM:
    - The idea is straightforward: use two pointers and swap
    - a.next = b.next, b.next = a.
    - Then continue the next pair, b = a.next.next, a=a.next
    - Remember to check null
    - Remember to track new head
    - Remember to link the new pair after the prior nodes.

ITERATIVE APPROACH:
    public ListNode swapPairs(ListNode head) {
        if(head == null || head.next == null)
            return head;
        ListNode newHead = head.next, a=head, b=a.next, pre=null;
        
        while(a!=null && b!=null){
            a.next = b.next;
            b.next = a;
                
            if(pre != null)
                pre.next = b;
            if(a.next==null)
                break;
                
            b=a.next.next;
            pre=a;
            a=a.next;
        }
        return newHead;
    }

RECURSIVE APPROACH:
    swapPairs(ListNode head) {
        if(head == null || head.next == null)
            return head;
        
        ListNode list1 = head.next;
        ListNode list2 = list1.next;
        
        list1.next = head;
        head.next = swapPairs(list2);
        
        return list1;
    }